@inject NavigationManager Navigate
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject TokenAuthStateProvider TokenAuthStateProvider

@if (pet == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Medium" Class="ma-4" />
}
else
{
    <MudDialog ContentStyle="width: 450px">
        <DialogContent>
            <MudText>@pet.Description</MudText>
                <br />
                <MudDivider />
                <br />
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.h6">Age (in years)</MudText>
                        <MudText Typo="Typo.subtitle1">@pet.Age</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.h6">Gender</MudText>
                        <MudText Typo="Typo.subtitle1">@pet.Sex</MudText>
                    </MudItem>
                </MudGrid>
                <MudText Typo="Typo.h6">Owner</MudText>
                <MudText Typo="Typo.subtitle1">@pet.OwnerName</MudText>
                <MudDivider />
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.h6">Care start date</MudText>
                        <MudText Typo="Typo.subtitle1">@pet.CareStart</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.h6">Care end date</MudText>
                        <MudText Typo="Typo.subtitle1">@pet.CareEnd</MudText>
                    </MudItem>
                </MudGrid>
                <br />
                @if (_error)
            {
                <MudAlert Severity="Severity.Error" IsOpen="true" Class="pt-4 pb-4">@_errorText</MudAlert>
            }
        </DialogContent>
        <DialogActions>
        @if (IsOwner)
        {
        <MudButton Color="Color.Error" OnClick="Delete">Remove pet</MudButton>
        <MudButton Color="Color.Info" OnClick="Update">Edit information</MudButton>
        }
        <MudButton OnClick="Close">Close</MudButton>
        </DialogActions>
    </MudDialog>
}
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public int PetId { get; set; }
    [Parameter] public bool LoggedIn { get; set; }
    [Parameter] public int UserId { get; set; }
    [Parameter] public bool IsOwner { get; set; }
    public PetDto? pet;

    bool _error = false;
    string _errorText = "An unexpected error occured.";

    bool _settingToken = true;

    protected override async Task OnInitializedAsync()
    {
        pet = await httpClient.GetFromJsonAsync<PetDto>($"api/pets/{PetId}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && httpClient.DefaultRequestHeaders.Authorization == null)
        {
            var token = await TokenAuthStateProvider.GetTokenRawAsync();
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            _settingToken = false;
        }
    }

    async void Delete()
    {
        while (_settingToken)
        {
            await Task.Delay(100);
        }

        var response = await httpClient.DeleteAsync($"api/pets/{PetId}");
        if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
        {
            Close();
            await DialogService.ShowMessageBox("Success", "Successfuly removed pet.");
            Navigate.NavigateTo("/", true, false);
        }
        else
        {
            _error = true;
            _errorText = "An error occurred while removing pet.";
        }
    }

    void Update()
    {
        Navigate.NavigateTo($"/pets/{PetId}");
    }

    void Close() => MudDialog.Cancel();
}