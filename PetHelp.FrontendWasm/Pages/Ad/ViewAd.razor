@page "/pets/{PetId:int}/ads/{AdId:int}"

@inject NavigationManager Navigate
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject TokenAuthStateProvider TokenAuthStateProvider

<MudContainer Class="mt-16 px-8">
    <MudGrid>
        <MudItem xs="12" sm="12" md="12" lg="10" xl="8" Class="mx-auto">
            <MudPaper Elevation="2" Class="pa-4 my-2">
                @if (ad == null && pet == null)
                {
                    <MudContainer Class="d-flex flex-column justify-content-center align-items-center">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" Class="mx-auto" />
                    </MudContainer>
                }
                else
                {
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.h5">@ad.PetName</MudText>
                        </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.subtitle1">@pet.Description</MudText>
                        </MudItem>
                    <MudDivider />
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.h6" Class="mt-2">Age (in years)</MudText>
                        <MudText Typo="Typo.subtitle1">@pet.Age</MudText>
                        </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.h6" Class="mt-1">Gender</MudText>
                        <MudText Typo="Typo.subtitle1">@pet.Sex</MudText>
                        </MudItem>
                    <MudText Typo="Typo.h6" Class="mt-1">Owner</MudText>
                    <MudText Typo="Typo.subtitle1">@pet.OwnerName</MudText>
                    <MudDivider />
                    <MudGrid Class="mt-1">
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.h6">Care start date</MudText>
                            <MudText Typo="Typo.subtitle1">@pet.CareStart</MudText>
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudText Typo="Typo.h6">Care end date</MudText>
                                <MudText Typo="Typo.subtitle1">@pet.CareEnd</MudText>
                            </MudItem>
                        </MudGrid>
                    <br />
                    @if (_error)
                    {
                        <MudAlert Severity="Severity.Error" IsOpen="true" Class="pt-4 pb-4">@_errorText</MudAlert>
                    }
                    @if (IsOwner)
                    {
                        <div style="display: flex; justify-content: flex-end;">
                            <MudButton Color="Color.Primary" OnClick="ViewApplicants">View applicants</MudButton>
                            <MudButton Color="Color.Error" OnClick="Delete">Delete ad</MudButton>
                            <MudButton Color="Color.Info" OnClick="Update">Edit ad</MudButton>
                        </div>
                    }
                    else if (IsApplicant)
                    {
                        <div style="display: flex; justify-content: flex-end;">
                            <MudButton Color="Color.Primary" OnClick="Apply">Apply to ad</MudButton>
                        </div>
                    }
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    bool _loggedIn = false;
    int _userId;
    string _userRole;
    [Parameter] public int PetId { get; set; }
    [Parameter] public int AdId { get; set; }

    List<string> Genders = new List<string> { "Male", "Female" };
    string selectedGender;

    bool IsOwner = false;
    bool IsApplicant = false;
    bool IsAdmin = false;

    public PetDto? pet;
    public AdDto? ad;

    bool _error = false;
    string _errorText = "You must be logged in as a applicant to apply for a job.";

    bool _settingToken = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await TokenAuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _loggedIn = authState.User.Identity.IsAuthenticated;

        if (_loggedIn)
        {
            _userId = int.Parse(user.FindFirst("nameid")?.Value ?? "-1");
            _userRole = user.FindFirst("role")?.Value ?? "applicant";

            if (_userRole == "owner")
            {
                IsOwner = true;
            }
            else if (_userRole == "applicant")
            {
                IsApplicant = true;
            }
            else if (_userRole == "admin")
            {
                IsOwner = true;
                IsApplicant = true;
                IsAdmin = true;
            }
        }

        pet = await httpClient.GetFromJsonAsync<PetDto>($"api/pets/{PetId}");
        ad = await httpClient.GetFromJsonAsync<AdDto>($"api/pets/{PetId}/ads/{AdId}");

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && httpClient.DefaultRequestHeaders.Authorization == null)
        {
            var token = await TokenAuthStateProvider.GetTokenRawAsync();
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            _settingToken = false;
        }
    }

    async void Delete()
    {
        while (_settingToken)
        {
            await Task.Delay(100);
        }

        var response = await httpClient.DeleteAsync($"api/pets/{PetId}/ads/{AdId}");
        if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
        {
            await DialogService.ShowMessageBox("Success", "Successfuly deleted ad.");
            Navigate.NavigateTo("/ads", true, false);
        }
        else
        {
            _error = true;
            _errorText = "An error occurred while deleting ad.";
        }
    }

    void Update()
    {
        Navigate.NavigateTo($"/pets/{PetId}/ads/edit/{AdId}");
    }

    void Apply()
    {
        //Navigate.NavigateTo($"/pets/{PetId}/ads/{AdId}");
    }

    void ViewApplicants()
    {
        Navigate.NavigateTo($"/pets/{PetId}/ads/{AdId}/applicants");
    }
}