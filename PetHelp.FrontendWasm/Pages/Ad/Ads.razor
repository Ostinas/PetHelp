@page "/ads"

@inject TokenAuthStateProvider TokenAuthStateProvider
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject NavigationManager Navigate

<PageTitle>Ads</PageTitle>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <!-- Actions -->
        @if (_loggedIn)
        {
            <MudItem lg="6" md="6" sm="12" xs="12">
                <MudPaper Elevation="2" Class="pa-4 overflow-auto" Height="17vh">
                    <!-- Authenticated -->
                    @if (_isApplicant)
                    {
                        <MudButton Href="/applications" FullWidth="true" Variant="Variant.Outlined">
                            <ChildContent>
                                <MudIcon Icon="@Icons.Material.Outlined.WorkOutline" Class="mr-1" />
                                <MudText Typo="Typo.button" Color="Color.Inherit">View applications</MudText>
                            </ChildContent>
                        </MudButton>
                    }

                    @if (_isOwner)
                    {
                        <MudListItem>
                            <MudButton OnClick="OpenCreateAdForPetDialog" FullWidth="true" Variant="Variant.Outlined">
                                <ChildContent>
                                    <MudIcon Icon="@Icons.Material.Filled.AddCircle" Class="mr-1" />
                                    <MudText Typo="Typo.button" Color="Color.Inherit">Create a new ad</MudText>
                                </ChildContent>
                            </MudButton>
                        </MudListItem>
                    }
                </MudPaper>
            </MudItem>
        }
        @if (_isOwner)
        {
            <!-- Owner ads -->
            <MudItem xs="12" sm="12">
                <MudPaper Elevation="2" Class="pa-4; overflow-auto" MaxHeight="1000px">
                    <MudText Typo="Typo.h5" Class="pa-4">My ads</MudText>
                    @if (OwnerAds == null)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" Class="ml-10" />
                    }
                    else
                    {
                        <MudList Clickable="true">
                            @foreach (var ad in OwnerAds)
                            {
                                <MudDivider />
                                <MudListItem @onclick="(e) => OpenAd(ad.Id, ad.PetId) ">
                                    <MudText Typo="Typo.h5">@ad.PetName</MudText>
                                        @if (ad.Pay > 0)
                                    {
                                        <MudText Typo="Typo.h5">@ad.Pay</MudText>
                                    }
                                    <MudText><b>Care start date:</b> @ad.CareStart</MudText>
                                    <MudText><b>Care end date:</b> @ad.CareEnd</MudText>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudPaper>
            </MudItem>
        }
        <!-- other ads -->
        <MudItem xs="12" sm="12">
            <!-- <MudPaper Elevation="2" Class="pa-4; overflow-auto" Height="90vh" MaxHeight="1000px">-->
            <MudPaper Elevation="2" Class="pa-4; overflow-auto" MaxHeight="1000px">
                <MudText Typo="Typo.h5" Class="pa-4">All active ads</MudText>
                @if (LatestAds == null)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" Class="ml-10" />
                }
                else if (LatestAds.Count == 0)
                {
                    <MudText Typo="Typo.subtitle1" Class="px-4 pb-3">There are no acttive ads currently</MudText>
                }
                else
                {
                    <MudList Clickable="true">
                        @foreach (var ad in LatestAds)
                        {
                            <MudDivider />
                            <MudListItem @onclick="(e) => OpenAd(ad.Id, ad.PetId) ">
                                <MudText Typo="Typo.h5">@ad.PetName</MudText>
                                    @if (ad.Pay > 0)
                                {
                                    <MudText Typo="Typo.h5">@ad.Pay</MudText>
                                }
                                <MudText><b>Care start date:</b> @ad.CareStart</MudText>
                                <MudText><b>Care end date:</b> @ad.CareEnd</MudText>
                            </MudListItem>
                        }
                    </MudList>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    bool _loggedIn = false;
    bool _loggingIn = true;
    int _userId;
    string _userRole;

    bool _isOwner = false;
    bool _isApplicant = false;
    bool _isAdmin = false;

    List<AdDto>? LatestAds;
    List<Owner> AllOwners = new List<Owner>();
    List<AdDto>? OwnerAds;
    List<PetDto> OwnerPets = new List<PetDto>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await TokenAuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _loggedIn = authState.User.Identity.IsAuthenticated;

        if (_loggedIn)
        {
            _userId = int.Parse(user.FindFirst("nameid")?.Value ?? "-1");
            _userRole = user.FindFirst("role")?.Value ?? "applicant";

            if (_userRole == "owner")
            {
                _isOwner = true;
            }
            else if (_userRole == "applicant")
            {
                _isApplicant = true;
            }
            else if (_userRole == "admin")
            {
                _isOwner = true;
                _isApplicant = true;
                _isAdmin = true;
            }
        }
        _loggingIn = false;

        var allPets = await httpClient.GetFromJsonAsync<List<PetDto>>("api/pets");
        var petIds = allPets.Where(p => p.CareStart != null && p.OwnerId != _userId).ToList();

        var allAdTasks = petIds.Select(pet => httpClient.GetFromJsonAsync<List<AdDto>>($"api/pets/{pet.Id}/ads")).ToList();
        var allAds = await Task.WhenAll(allAdTasks);
        LatestAds = new();
        foreach (var adList in allAds)
        {
            LatestAds.AddRange(adList);
        }

        if (_isOwner)
        {
            var ownerPetIds = allPets.Where(p => p.CareStart != null && p.OwnerId == _userId).ToList();
            var adTasks = ownerPetIds.Select(pet => httpClient.GetFromJsonAsync<List<AdDto>>($"api/pets/{pet.Id}/ads")).ToList();
            var ads = await Task.WhenAll(adTasks);
            OwnerAds = new();
            foreach (var adList in ads)
            {
                OwnerAds.AddRange(adList);
            }

            LatestAds = LatestAds.Where(ad => !OwnerAds.Any(ownerAd => ownerAd.Id == ad.Id)).ToList();
        }
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (!firstRender && httpClient.DefaultRequestHeaders.Authorization == null)
    //     {
    //         var token = await TokenAuthStateProvider.GetTokenRawAsync();
    //         httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

    //         if (_isOwner && !_isAdmin)
    //         {
    //             AllOwners.Add(await httpClient.GetFromJsonAsync<Owner>($"api/owners/{_userId}"));

    //             var adTasks = AllOwners.Select(owner => httpClient.GetFromJsonAsync<List<Ad>>($"api/owners/{owner.Id}/ads")).ToList();
    //             var ads = await Task.WhenAll(adTasks);
    //             foreach (var adList in ads)
    //             {
    //                 AllAds.AddRange(adList);
    //             }
    //             var applicationTasks = AllAds.Select(ad => httpClient.GetFromJsonAsync<List<ApplicationResponseVM>>($"api/companies/{ad.Company.Id}/ads/{ad.Id}/applications")).ToList();
    //             var applications = await Task.WhenAll(applicationTasks);
    //             foreach (var applicationList in applications)
    //             {
    //                 AllApplications.AddRange(applicationList);
    //             }
    //             AllApplications = AllApplications.OrderByDescending(a => a.ApplicationDate).ToList();
    //             _loading = false;
    //             StateHasChanged();
    //         }
    //     }
    // }

    // private void OpenAdDialog(Ad selectedAd)
    // {
    //     var parameters = new DialogParameters<HomeAdDialog>();
    //     parameters.Add("Ad", selectedAd);
    //     parameters.Add("LoggedIn", _loggedIn);
    //     parameters.Add("IsOwner", _isOwner);
    //     parameters.Add("IsAdOwner", _userId == selectedAd.Owner.Id);
    //     parameters.Add("UserId", _userId);
    //     var options = new DialogOptions { CloseOnEscapeKey = true };
    //     DialogService.Show<HomeAdDialog>(selectedAd.Pet.Name, parameters, options);
    // }

    private void OpenAd(int adId, int petId)
    {
        Navigate.NavigateTo($"/pets/{petId}/ads/{adId}");
    }

    private void OpenCreateAdForPetDialog()
    {
        var parameters = new DialogParameters<CreateAdForPetDialog>();
        parameters.Add("LoggedIn", _loggedIn);
        parameters.Add("UserId", _userId);
        parameters.Add("IsOwner", _isOwner);
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<CreateAdForPetDialog>("Choose your pet", parameters, options);
    }
}