@page "/"

@inject TokenAuthStateProvider TokenAuthStateProvider
@inject HttpClient httpClient
@inject IDialogService DialogService

<PageTitle>Home</PageTitle>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <!-- Actions -->
        @if (_loggedIn && _isOwner)
        {
            <MudItem lg="6" md="6" sm="12" xs="12">
                <MudPaper Elevation="2" Class="pa-4 overflow-auto" Height="17vh">
                    <MudListItem>
                        <MudButton Href="/pets" FullWidth="true" Variant="Variant.Outlined">
                            <ChildContent>
                                <MudIcon Icon="@Icons.Material.Outlined.Pets" Class="mr-1" />
                                <MudText Typo="Typo.button" Color="Color.Inherit">Add a new pet</MudText>
                            </ChildContent>
                        </MudButton>
                    </MudListItem>
            </MudPaper>
        </MudItem>
        }

        <MudItem lg="3" md="3" sm="12" xs="12">
            <MudPaper Elevation="2" Class="pa-4" Height="25vh">
                <MudCarousel Class="mud-width-full" style="height:100%" ShowArrows="false" ShowBullets="false" EnableSwipeGesture="false" AutoCycle="true" TData="object">
                    <MudCarouselItem Transition="Transition.Slide" Color="@Color.Primary">
                        <MudImage Src="images/1.jpg" Fluid="true" ObjectFit="ObjectFit.Fill"></MudImage>
                    </MudCarouselItem>
                    <MudCarouselItem Transition="Transition.Slide" Color="@Color.Secondary">
                        <MudImage Src="images/2.jpg" Fluid="true" ObjectFit="ObjectFit.Fill"></MudImage>
                    </MudCarouselItem>
                    <MudCarouselItem Transition="Transition.Slide">
                        <MudImage Src="images/3.jpg" Fluid="true" ObjectFit="ObjectFit.Fill"></MudImage>
                    </MudCarouselItem>
                </MudCarousel>
            </MudPaper>
        </MudItem>

        @if (_isOwner)
        {
            <!-- Owner pets -->
            <MudItem xs="12" sm="12">
                <MudPaper Elevation="2" Class="pa-4; overflow-auto" MaxHeight="1000px">
                    <MudText Typo="Typo.h5" Class="pa-3">My pets</MudText>
                    @if (OwnerPets == null)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" Class="ml-10" />
                    }
                    else
                    {
                        <MudList Clickable="true">
                            @foreach (var pet in OwnerPets)
                            {
                                <MudDivider />
                                <MudListItem @onclick="(e) => OpenPetDialog(pet.Id, pet.Name) ">
                                    <MudText Typo="Typo.h5">@pet.Name</MudText>
                                        <MudText Typo="Typo.h6">@pet.Description</MudText>
                                        <MudText> Gender: @pet.Sex </MudText>
                                        <MudText> Age: @pet.Age </MudText>
                                    </MudListItem>
                            }
                        </MudList>
                    }
                </MudPaper>
            </MudItem>
        }

        <!-- All pets -->
        <MudItem xs="12" sm="12">
            <MudPaper Elevation="2" Class="pa-4; overflow-auto" MaxHeight="1000px">
                @if (_isOwner)
                {
                    <MudText Typo="Typo.h5" Class="pa-4">Pets of other owners</MudText>
                }
                else
                {
                    <MudText Typo="Typo.h5" Class="pa-4">All pets</MudText>
                }

                @if (AllPets == null)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" Class="ml-10" />
                }
                else if (AllPets.Count == 0)
                {
                    <MudText Typo="Typo.subtitle1" Class="px-4 pb-3">There are no other pets currently</MudText>
                }
                else
                {
                    <MudList Clickable="true">
                        @foreach (var pet in AllPets)
                        {
                            <MudDivider />
                            <MudListItem @onclick="(e) => OpenPetDialog(pet.Id, pet.Name) ">
                                <MudText Typo="Typo.h5">@pet.Name</MudText>
                                    <MudText Typo="Typo.h6">@pet.Description</MudText>
                                    <MudText> Gender: @pet.Sex </MudText>
                                    <MudText> Age: @pet.Age </MudText>
                                </MudListItem>
                        }
                    </MudList>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    @*  *@
    bool _loggedIn = false;
    bool _loggingIn = true;
    int _userId;
    string _userRole;

    bool _isOwner = false;
    bool _isApplicant = false;
    bool _isAdmin = false;

    List<PetDto>? AllPets;
    List<Owner> AllOwners = new List<Owner>();
    // List<Ad> AllAds = new List<Ad>();
    List<PetDto>? OwnerPets;
    List<AdDto>? OwnerAds;
    // List<ApplicationResponseVM> AllApplications = new List<ApplicationResponseVM>();

    HttpClient client;

    protected override async Task OnInitializedAsync()
    {
        var authState = await TokenAuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _loggedIn = authState.User.Identity.IsAuthenticated;

        if (_loggedIn)
        {
            _userId = int.Parse(user.FindFirst("nameid")?.Value ?? "-1");
            _userRole = user.FindFirst("role")?.Value ?? "applicant";

            if (_userRole == "owner")
            {
                _isOwner = true;
            }
            else if (_userRole == "applicant")
            {
                _isApplicant = true;
            }
            else if (_userRole == "admin")
            {
                _isOwner = true;
                _isApplicant = true;
                _isAdmin = true;
            }
        }
        _loggingIn = false;

        AllPets = await httpClient.GetFromJsonAsync<List<PetDto>>("api/pets");

        if (_isOwner)
        {
            OwnerPets = AllPets.Where(p => p.OwnerId == _userId).ToList();
            AllPets = AllPets.Where(pet => !OwnerPets.Any(ownerPet => ownerPet.Id == pet.Id)).ToList();
        }
        
        StateHasChanged();
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (!firstRender && httpClient.DefaultRequestHeaders.Authorization == null)
    //     {
    //         var token = await TokenAuthStateProvider.GetTokenRawAsync();
    //         httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

    //         if (_isOwner && !_isAdmin)
    //         {
    //             AllOwners.Add(await httpClient.GetFromJsonAsync<Owner>($"api/owners/{_userId}"));

    //             var adTasks = AllOwners.Select(owner => httpClient.GetFromJsonAsync<List<Ad>>($"api/owners/{owner.Id}/ads")).ToList();
    //             var ads = await Task.WhenAll(adTasks);
    //             foreach (var adList in ads)
    //             {
    //                 AllAds.AddRange(adList);
    //             }
    //             var applicationTasks = AllAds.Select(ad => httpClient.GetFromJsonAsync<List<ApplicationResponseVM>>($"api/companies/{ad.Company.Id}/ads/{ad.Id}/applications")).ToList();
    //             var applications = await Task.WhenAll(applicationTasks);
    //             foreach (var applicationList in applications)
    //             {
    //                 AllApplications.AddRange(applicationList);
    //             }
    //             AllApplications = AllApplications.OrderByDescending(a => a.ApplicationDate).ToList();
    //             _loading = false;
    //             StateHasChanged();
    //         }
    //     }
    // }

    // private void OpenAdDialog(Ad selectedAd)
    // {
    //     var parameters = new DialogParameters<HomeAdDialog>();
    //     parameters.Add("Ad", selectedAd);
    //     parameters.Add("LoggedIn", _loggedIn);
    //     parameters.Add("IsOwner", _isOwner);
    //     parameters.Add("IsAdOwner", _userId == selectedAd.Owner.Id);
    //     parameters.Add("UserId", _userId);
    //     var options = new DialogOptions { CloseOnEscapeKey = true };
    //     DialogService.Show<HomeAdDialog>(selectedAd.Pet.Name, parameters, options);
    // }

    private void OpenPetDialog(int petId, string petName)
    {
        var parameters = new DialogParameters<PetViewDialog>();
        parameters.Add("PetId", petId);
        parameters.Add("LoggedIn", _loggedIn);
        parameters.Add("UserId", _userId);
        parameters.Add("IsOwner", _isOwner);
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<PetViewDialog>(petName, parameters, options);
    }
}