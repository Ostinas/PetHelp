@inherits LayoutComponentBase

@inject TokenAuthStateProvider TokenAuthStateProvider
@inject NavigationManager Navigate

<MudThemeProvider Theme="Theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar>
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        </MudHidden>
        <MudButton Variant="Variant.Text" Class="ml-3" Href="/"><MudText Typo="Typo.h5" Style="color:white">PetHelp</MudText></MudButton>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <div style="display: flex; flex-direction: row;">
                <MudButton Href="/" Style="color:white">Home</MudButton>
                <MudButton Href="/ads" Style="color:white">Browse ads</MudButton>
                @if (IsOwner)
                {
                    <MudButton Href="/applicants" Style="color:white">My applicants</MudButton>
                }
                @* <MudButton Href="/applications" Style="color:white">Applications</MudButton> *@
            </div>
        </MudHidden>
        <MudSpacer />
        <div>
            <MudContainer>
                <MudAvatar>
                    <MudMenu Icon="@Icons.Material.Filled.AccountCircle" Size="Size.Large" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                        @if (_loggedIn)
                        {
                            @if (IsOwner)
                            {
                                <MudMenuItem>
                                    <MudButton OnClick="Profile" Href="/profile">
                                    <ChildContent>
                                        <MudIcon Icon="@Icons.Material.Filled.ManageAccounts" Class="mr-1" />
                                        <MudText Typo="Typo.button" Color="Color.Inherit">Profile</MudText>
                                    </ChildContent>
                                </MudButton>
                            </MudMenuItem>
                            }
                            <MudMenuItem>
                                <MudButton OnClick="Logout" Href="/logout">
                                    <ChildContent>
                                        <MudIcon Icon="@Icons.Material.Filled.ExitToApp" Class="mr-1" />
                                        <MudText Typo="Typo.button" Color="Color.Inherit">Logout</MudText>
                                    </ChildContent>
                                </MudButton>
                            </MudMenuItem>
                        }
                        else
                        {
                            <MudMenuItem>
                                <MudButton OnClick="Login">
                                    <ChildContent>
                                        <MudIcon Icon="@Icons.Material.Filled.ExitToApp" Class="mr-1" />
                                        <MudText Typo="Typo.button" Color="Color.Inherit">Login</MudText>
                                    </ChildContent>
                                </MudButton>
                            </MudMenuItem>
                        }
                    </MudMenu>
                </MudAvatar>
            </MudContainer>
        </div>
    </MudAppBar>
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
            <NavMenu></NavMenu>
        </MudDrawer>
    </MudHidden>
    <MudMainContent Style="flex-grow: 1; padding-bottom:60px;">
        @Body
    </MudMainContent>
    <MudAppBar Elevation="1" Style="top: auto; bottom: 0" Dense="true" Fixed="true">
        <MudGrid Justify="Justify.FlexEnd">
            <MudText Style="font-size:small">© 2023 Ostinas Mačiulis</MudText>
        </MudGrid>
    </MudAppBar>
</MudLayout>

@code {
    bool _drawerOpen = true;
    bool _loggedIn = false;
    bool IsOwner = false;
    string? userRole;

    MudTheme Theme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = Colors.Green.Darken3,
                Secondary = Colors.Green.Accent4,
                Info = Colors.Cyan.Default,
                Error = Colors.DeepOrange.Accent3,
                AppbarBackground = Colors.Teal.Darken1,
            },
            Typography = new Typography()
            {
                
                Default = new Default()
                {
                    FontFamily = new[] { "Verdana", "Helvetica", "Arial", "sans-serif" }
                }
            }
        };

    protected override async Task OnInitializedAsync()
    {
        var authState = await TokenAuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _loggedIn = authState.User.Identity.IsAuthenticated;

        if (_loggedIn)
        {
            userRole = user.FindFirst("role")?.Value ?? "applicant";
            if (userRole == "owner")
            {
                IsOwner = true;
                StateHasChanged();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var authState = await TokenAuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _loggedIn = authState.User.Identity.IsAuthenticated;
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void Login()
    {
        Navigate.NavigateTo("/login");
    }

    void Logout()
    {
        Navigate.NavigateTo("/logout");
    }

    void Profile()
    {
        Navigate.NavigateTo("/profile");
    }
}
